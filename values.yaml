shiny: # Section principale de configuration spécifique à l'application Shiny
  image: # Paramètres liés à l'image Docker utilisée pour l'application
    repository: ssmagr/rgonomie # L'URL du registre Docker où se trouve l'image de l'app Shiny à déployer
    tag: "latest" # Version (tag) de l'image Docker à utiliser
    pullPolicy: Always # Politique de récupération de l'image : "Always" force Kubernetes à tirer l'image à chaque déploiement
  ingress: # Configuration pour exposer l'application via un Ingress (accès externe HTTP/HTTPS)
    enabled: true # Active l'Ingress pour rendre l'app accessible depuis l'extérieur
    hostname: rgonomie.lab.sspcloud.fr # Nom de domaine utilisé pour accéder à l'app une fois déployée
  probe: # Configuration des sondes de santé pour vérifier l'état du conteneur
    enabled: true # Active les sondes Kubernetes (liveness, readiness, startup)
    probeValue:
        livenessProbe: # Vérifie si l'application est vivante (redémarre si plantée)
          httpGet:
            path: / # Vérifie l'accessibilité de l'application via HTTP
            port: 3838 # Port d'écoute de Shiny
          initialDelaySeconds: 60 # Temps d'attente avant de commencer à vérifier
          timeoutSeconds: 30 # Délai pour la réponse avant de déclarer que la sonde a échoué
          periodSeconds: 10 # Fréquence de vérification (toutes les 10 secondes)
          failureThreshold: 3 # Nombre de tentatives échouées avant de considérer l'application comme morte

        readinessProbe: # Vérifie si l'application est prête à recevoir du trafic
          httpGet:
            path: / # Vérifie l'accessibilité de l'application via HTTP
            port: 3838 # Port d'écoute de Shiny
          initialDelaySeconds: 60 # Temps d'attente avant de commencer à vérifier
          timeoutSeconds: 30 # Délai pour la réponse avant de déclarer que la sonde a échoué
          periodSeconds: 10 # Fréquence de vérification (toutes les 10 secondes)
          failureThreshold: 3 # Nombre de tentatives échouées avant de déclarer que l'application n'est pas prête

        startupProbe: # Sonde utilisée uniquement au démarrage (évite erreurs prématurées)
          httpGet:
            path: / # Vérifie l'accessibilité de l'application via HTTP
            port: 3838 # Port d'écoute de Shiny
          initialDelaySeconds: 60 # Temps d'attente avant de commencer à vérifier (temps pour que l'app démarre)
          timeoutSeconds: 30 # Délai pour la réponse avant de déclarer que la sonde a échoué
          periodSeconds: 15 # Fréquence de vérification (toutes les 15 secondes)
          failureThreshold: 5 # Nombre de tentatives échouées avant de considérer que l'application ne démarre pas correctement

  resources: # Configuration des ressources demandées/limitées pour le conteneur
    requests:
      cpu: "2" # Réserve 2 unités de CPU à l'application (garanti par Kubernetes)
      memory: "2Gi" # Alloue de la mémoire supplémentaire pour l'application
    limits:
      cpu: "4" # Limite à 4 unités de CPU (évite que l'app consomme trop de ressources)
      memory: "4Gi" # Limite la mémoire à 4 Go pour éviter une consommation excessive

  s3: # Configuration de l’accès à un bucket S3
    enabled: false # Désactive l’utilisation de S3 dans cette configuration
